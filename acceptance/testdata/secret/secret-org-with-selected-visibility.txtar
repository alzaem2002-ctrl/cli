# Setup environment variables used for testscript
env REPO=${SCRIPT_NAME}-${RANDOM_STRING}
env2upper SECRET_NAME=${SCRIPT_NAME}_${RANDOM_STRING}

# Use gh as a credential helper
exec gh auth setup-git

# Create a repository with a file so it has a default branch
exec gh repo create ${ORG}/${REPO} --add-readme --private

# Defer repo cleanup
defer gh repo delete --yes ${ORG}/${REPO}

# Confirm organization secret does not exist, will fail admin:org scope missing
exec gh secret list --org ${ORG}
! stdout ${SECRET_NAME}

# Set an organization secret with no shared visibility, but no repos
exec gh secret set ${SECRET_NAME} --org ${ORG} --body 'just an organization secret' --no-repos-selected

# Defer organization secret cleanup
defer gh secret delete ${SECRET_NAME} --org ${ORG}

# Verify new organization secret exists with shared visibility
exec gh api -X GET /orgs/${ORG}/actions/secrets/${SECRET_NAME} --jq '.visibility'
stdout selected

# Verify the secret is not shared with any repositories
exec gh api -X GET /orgs/${ORG}/actions/secrets/${SECRET_NAME}/repositories --jq '.repositories | length'
stdout 0

# Set the same organization secret with shared visibility to the previously created repository
exec gh secret set ${SECRET_NAME} --org ${ORG} --body 'just an organization secret' --repos ${REPO}

# Verify the secret is now shared with the repository
exec gh api -X GET /orgs/${ORG}/actions/secrets/${SECRET_NAME}/repositories --jq '.repositories[0].name'
stdout ${REPO}

# Set the same organization secret with shared visibility back  to no repositories selected
exec gh secret set ${SECRET_NAME} --org ${ORG} --body 'just an organization secret' --no-repos-selected

# Verify the secret is not shared with any repositories
exec gh api -X GET /orgs/${ORG}/actions/secrets/${SECRET_NAME}/repositories --jq '.repositories | length'
stdout 0
